#!/usr/bin/env python3
# check_sshfp: Nagios plugin for checking SSHFP records
# Copyright (C) 2015 John Stumpo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

# Usage: check_sshfp [hostname]
# Considers existing SSHFPs for non-offered key types and missing SSHFPs for
# offered key types to be WARNING, and incorrect SSHFPs to be CRITICAL.

import dns.resolver, dns.rdatatype
import sys
import subprocess
import hashlib
import base64
import binascii
import traceback

# SSHFP algorithm numbers to their SSH names.
SSHFP_KEY_ALGS = {
  1: 'ssh-rsa',
  2: 'ssh-dss',
  3: 'ecdsa-sha2-nistp256',
  4: 'ssh-ed25519',
}

# SSHFP fingerprint type numbers to functions computing them.
SSHFP_FP_ALGS = {
  1: lambda m: hashlib.sha1(m).digest(),
  2: lambda m: hashlib.sha256(m).digest(),
}


def output_sshfp_record(hostname, algorithm, key):
    # get algorithm number
    for number, value in SSHFP_KEY_ALGS.items():
        if value == algorithm:
            algonum = number
            break
    print("%s. IN SSHFP %s 2 %s" % (hostname, algonum, hashlib.sha256(base64.b64decode(key)).hexdigest()))

def check_sshfp_for_host(hostname):
    # Get the NS records so we can ask the auth server directly
    nsanswer = dns.resolver.query(hostname, "NS", raise_on_no_answer=False)
    if not nsanswer.rrset:
        # no NS records for this hostname, so find the authority and do an NS lookup for that name instead
        authority = nsanswer.response.authority[0].name.to_text()
        nsanswer = dns.resolver.query(authority, "NS", raise_on_no_answer=False)
        if not nsanswer.rrset:
            # no NS records found for authority, something is weird
            print('SSHFP CRITICAL: Unable to find nameservers for authority %s for hostname %s' % (authority, hostname))
            sys.exit(2)

    # get the v4 ip of the first nameserver in the list
    nameserver = nsanswer[0].to_text()
    ipanswer = dns.resolver.query(nameserver)
    if not ipanswer:
        # something is wrong, found no A records for this nameserver
        print('SSHFP CRITICAL: Unable to lookup IP for authoritative nameserver %s' % nameserver)
        sys.exit(2)

    # ok, get the sshfp records using the auth server
    authres = dns.resolver.Resolver(configure=False)
    authres.nameservers = [ipanswer[0].to_text()]
    sshfp_result = authres.query(hostname, dns.rdatatype.SSHFP, raise_on_no_answer=False)

    # Turn them into a more convenient representation.
    sshfps = {}
    if sshfp_result:
        for record in sshfp_result.rrset:
            sshfps.setdefault(SSHFP_KEY_ALGS[record.algorithm], {'seen': False, 'fingerprints': []})['fingerprints'].append((SSHFP_FP_ALGS[record.fp_type], record.fingerprint))
    #print(sshfps)

    # ssh-keyscan puts status info on stderr, and there's no option
    # to make it not do that. But we still want real errors to be
    # passed through on stderr... and keys (on stdout) might be big,
    # so we might deadlock if we read all the way through one stdio
    # stream without also reading the other simultaneously... DansGame.
    subproc = subprocess.Popen(['ssh-keyscan', '-t', 'rsa,dsa,ecdsa,ed25519', hostname], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = subproc.communicate()
    cleaned_stderr = '\n'.join(line for line in stderr.decode().splitlines() if not line.startswith('#'))
    # It can also return 0 even if there were critical problems
    # checking for keys... assume such if there's no output. Double-DansGame.
    if subproc.wait() != 0 or stdout == b'':
        print('SSHFP CRITICAL: ssh-keyscan failed: ' + cleaned_stderr)
        sys.exit(2)

    # Check that each key has at least one SSHFP, and that all of
    # that algorithm's SSHFPs match the key.
    exitcode = 0
    for line in stdout.decode().splitlines():
        host, algorithm, key = line.strip().split()
        try:
            sshfp = sshfps[algorithm]
        except KeyError:
            print('SSHFP WARNING: No record for algorithm %s offered by server. Add this record:' % (algorithm,))
            output_sshfp_record(hostname, algorithm, key)
            if exitcode < 1:
                exitcode = 1
            sshfp = None

        if sshfp:
            sshfp['seen'] = True
            for hashfunc, dns_fp in sshfp['fingerprints']:
                # calculate sshfp based on observed public ssh key
                observed_fp = hashfunc(base64.b64decode(key.encode()))
                if observed_fp != dns_fp:
                    print('SSHFP CRITICAL: Fingerprint mismatch: SSHFP %s, observed %s. Delete the wrong record and add this instead:' % (binascii.hexlify(dns_fp).decode(), binascii.hexlify(observed_fp).decode()))
                    output_sshfp_record(hostname, algorithm, key)
                    exitcode = 2

    # Check that there are no extra SSHFPs.
    for algorithm, sshfp in sshfps.items():
        if not sshfp['seen']:
            print('SSHFP WARNING: Record present for algorithm %s not offered by server. Delete this record:' % (algorithm,))
            output_sshfp_record(hostname, algorithm, key)
            if exitcode < 1:
                exitcode = 1

    if not exitcode:
        # exitcode is 0
        print('SSHFP OK: %d records for %d algorithms' % (len(sshfp_result.rrset), len(sshfps)))
    sys.exit(exitcode)


if __name__ == '__main__':
    # Turn exceptions into UNKNOWN.
    try:
        check_sshfp_for_host(sys.argv[1])
    except Exception:
        sys.stdout.write('SSHFP UNKNOWN: ' + traceback.format_exc())
        sys.exit(3)

